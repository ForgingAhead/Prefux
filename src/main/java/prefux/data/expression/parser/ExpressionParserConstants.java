/*  
 * Copyright (c) 2004-2013 Regents of the University of California.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of the University nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * Copyright (c) 2014 Martin Stockhammer
 */
/* Generated By:JavaCC: Do not edit this line. ExpressionParserConstants.java */
package prefux.data.expression.parser;

public interface ExpressionParserConstants {

  int EOF = 0;
  int TRUE = 6;
  int FALSE = 7;
  int NULL = 8;
  int IF = 9;
  int THEN = 10;
  int ELSE = 11;
  int AND = 12;
  int OR = 13;
  int NOT = 14;
  int XOR = 15;
  int INT = 16;
  int DECIMAL_LITERAL = 17;
  int HEX_LITERAL = 18;
  int OCTAL_LITERAL = 19;
  int LONG = 20;
  int DOUBLE = 21;
  int FLOAT = 22;
  int EXPONENT = 23;
  int STRING = 24;
  int QUOTED = 25;
  int IDENTIFIER = 26;
  int LETTER = 27;
  int DIGIT = 28;
  int LPAREN = 29;
  int RPAREN = 30;
  int EQ = 31;
  int GT = 32;
  int LT = 33;
  int LE = 34;
  int GE = 35;
  int NE = 36;
  int ADD = 37;
  int SUB = 38;
  int MUL = 39;
  int DIV = 40;
  int POW = 41;
  int MOD = 42;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<TRUE>",
    "<FALSE>",
    "<NULL>",
    "<IF>",
    "<THEN>",
    "<ELSE>",
    "<AND>",
    "<OR>",
    "<NOT>",
    "<XOR>",
    "<INT>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<LONG>",
    "<DOUBLE>",
    "<FLOAT>",
    "<EXPONENT>",
    "<STRING>",
    "<QUOTED>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "<EQ>",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "<NE>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"%\"",
    "\",\"",
  };

}
